#<python代码：两个数的除法>
#a = 81           #a为被除数
#b = 9            #b为除数
#c = int(a / b)   #商赋值给c
#d = a%b          #余数赋值给d
#print(c,d)    


#<汇编代码：两个数的除法>
move R1,10   #a，表示被除数
move R2,4    #b，表示除数
move R3,0    #c，表示商
move R4,R1   #d，表示余数，使余数一开始存入被除数，因为后边的每次做减法都是用余数和除数进行运算
clz R5,R1     #统计被除数最高位到第一个1之间0的个数
clz R6,R2     #统计除数最高位到第一个1之间0的个数
sub R7,R6,R5  
shiftl R2,R2,R7 #将除数左移(R7)位，使得除数非0的最高位与被除数非0的最高位对齐
goto L1     

L0:
shiftr R2,R2,1  
L1:   #L1标记的语句块是对除数和余数比较大小，来确定下一步的操作
slt R8,R4,R2  #比较余数和除数的大小，如果余数小于除数，R8置1；否则R8置0
beqz R8,L3  #寄存器R8中的值为0的时候，跳到L3语句块；否则顺序执行下一条指令
L2:         #L2标记的语句块是余数小于除数时的操作
shiftl R3,R3,1 #商左移一位
goto L4     
L3:         #L3所标记的语句块是余数大于除数时的操作
sub R4,R4,R2  #余数减去除数，将所得的差作为新的余数存储在寄存器R4中
shiftl R3,R3,1  #商左移一位
or R3,R3,1    #用此时左移一位后的商和1做或运算，这样1就可以被记录到商中了
L4:
sub R7,R7,1   #使用被除数与除数的位数差计数，即在做减法和移位操作中，除数一共需要右移的位数，作为移位结束的判断条件
slt R9,R7,0   #R7中的值小于0的时候表示除数移位结束，R9置1；否则还需要进行减法和移位操作，R9置0
beqz R9,L0   #R9中的值为0，跳到L0标记的语句块，否则顺序执行下一条指令
_pr R3,R4    

